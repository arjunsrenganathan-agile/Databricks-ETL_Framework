name: Deploy Databricks ETL Framework

on:
  push:
    branches:
      - main        # Production deployments
      - develop     # Staging deployments  
    paths:
      - 'ETL_Framework/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'ETL_Framework/**'
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment target'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - sit
          - uat
          - prod
      branch:
        description: 'Branch to deploy from (leave empty for current)'
        required: false
        type: string
      force_deploy:
        description: 'Force deployment (skip validation failures)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  WORKING_DIRECTORY: './ETL_Framework'

jobs:
  # Validation job - runs for all triggers
  validate:
    name: 'Validate Bundle'
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.determine-target.outputs.target }}
      should_deploy: ${{ steps.determine-target.outputs.should_deploy }}
      environment: ${{ steps.determine-target.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Determine target and deployment strategy
        id: determine-target
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          
          # Determine target environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET="${{ github.event.inputs.target }}"
            SHOULD_DEPLOY="true"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TARGET="dev"
            SHOULD_DEPLOY="false"  # Only validate on PRs, don't deploy
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TARGET="prod"
            SHOULD_DEPLOY="true"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            TARGET="sit"
            SHOULD_DEPLOY="true"
          else
            TARGET="dev"
            SHOULD_DEPLOY="false"  # Feature branches only validate
          fi
          
          # Map target to GitHub environment
          case $TARGET in
            prod) ENVIRONMENT="production" ;;
            sit|uat) ENVIRONMENT="staging" ;;
            dev) ENVIRONMENT="development" ;;
            *) ENVIRONMENT="development" ;;
          esac
          
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          
          echo "🎯 Target: $TARGET"
          echo "🚀 Should Deploy: $SHOULD_DEPLOY" 
          echo "🏠 Environment: $ENVIRONMENT"

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks configure --host "$DATABRICKS_HOST" --token "$DATABRICKS_TOKEN"

      - name: Install Python dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "📦 Installing dependencies..."
          if [ -f requirements.txt ]; then
            echo "Installing from requirements.txt"
            uv pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            echo "Installing dev dependencies"
            uv pip install -r requirements-dev.txt
          fi
          echo "✅ Dependencies installed"

      - name: Run Python tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          if [ -d tests ]; then
            echo "🧪 Running Python tests..."
            python -m pytest tests/ -v --tb=short --maxfail=5
            echo "✅ Tests passed"
          else
            echo "ℹ️ No tests directory found, skipping tests"
          fi

      - name: Validate bundle configuration
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "🔍 Validating bundle configuration..."
          echo "Target: ${{ steps.determine-target.outputs.target }}"
          
          # Check databricks.yml exists
          if [ ! -f "databricks.yml" ]; then
            echo "❌ databricks.yml not found!"
            exit 1
          fi
          
          # Show bundle info
          echo "Bundle contents:"
          ls -la
          
          # Validate the bundle
          databricks bundle validate --target ${{ steps.determine-target.outputs.target }}
          echo "✅ Bundle validation successful!"

      - name: Show deployment plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        if: steps.determine-target.outputs.should_deploy == 'true'
        run: |
          echo "📋 Deployment Plan for ${{ steps.determine-target.outputs.target }}:"
          databricks bundle summary --target ${{ steps.determine-target.outputs.target }} || echo "Summary not available"

  # Deployment job - only runs when should_deploy is true
  deploy:
    name: 'Deploy to ${{ needs.validate.outputs.target }}'
    runs-on: ubuntu-latest
    needs: [validate]
    if: |
      always() && 
      needs.validate.result == 'success' && 
      needs.validate.outputs.should_deploy == 'true'
    environment: 
      name: ${{ needs.validate.outputs.environment }}
      url: ${{ steps.deploy.outputs.workspace_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks configure --host "$DATABRICKS_HOST" --token "$DATABRICKS_TOKEN"

      - name: Pre-deployment check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "🚀 Starting deployment to ${{ needs.validate.outputs.target }}"
          echo "Environment: ${{ needs.validate.outputs.environment }}"
          echo "Force deploy: ${{ github.event.inputs.force_deploy }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          
          # Final validation unless force deploy
          if [[ "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
            echo "🔍 Final validation before deployment..."
            databricks bundle validate --target ${{ needs.validate.outputs.target }}
          else
            echo "⚠️ Skipping validation due to force deploy flag"
          fi

      - name: Deploy bundle
        id: deploy
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "📦 Deploying bundle to ${{ needs.validate.outputs.target }}..."
          
          # Deploy with appropriate flags
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            databricks bundle deploy --target ${{ needs.validate.outputs.target }} --force
            echo "⚠️ Force deployment completed"
          else
            databricks bundle deploy --target ${{ needs.validate.outputs.target }}
            echo "✅ Standard deployment completed"
          fi
          
          # Get workspace URL
          WORKSPACE_HOST=$(databricks auth env | grep DATABRICKS_HOST | cut -d'=' -f2)
          echo "workspace_url=${WORKSPACE_HOST}" >> $GITHUB_OUTPUT
          
          echo "🎉 Deployment successful!"

      - name: Post-deployment verification
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "🔍 Post-deployment verification..."
          
          # Show deployed resources
          echo "Deployed resources summary:"
          databricks bundle summary --target ${{ needs.validate.outputs.target }} || echo "Summary not available"
          
          # Add custom verification steps here:
          # - Check if jobs were created successfully
          # - Verify notebooks are accessible  
          # - Run smoke tests
          # - Check data pipeline status
          
          echo "✅ Post-deployment verification completed"

      - name: Update deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **DEPLOYMENT SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Target:** ${{ needs.validate.outputs.target }}" >> $GITHUB_STEP_SUMMARY  
            echo "🌍 **Environment:** ${{ needs.validate.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **Workspace:** ${{ steps.deploy.outputs.workspace_url }}" >> $GITHUB_STEP_SUMMARY
            echo "🌿 **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your ETL Framework has been successfully deployed! 🚀" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **DEPLOYMENT FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for error details." >> $GITHUB_STEP_SUMMARY
            echo "You can retry the deployment or use the manual workflow dispatch." >> $GITHUB_STEP_SUMMARY
          fi

  # Notification job
  notify:
    name: 'Send Notifications'
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always() && needs.validate.outputs.should_deploy == 'true'
    steps:
      - name: Determine notification content
        id: notification
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=🎉" >> $GITHUB_OUTPUT
            echo "message=ETL Framework successfully deployed to ${{ needs.validate.outputs.target }}" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT  
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=ETL Framework deployment to ${{ needs.validate.outputs.target }} failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: vars.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [
                {
                  \"color\": \"${{ steps.notification.outputs.color }}\",
                  \"blocks\": [
                    {
                      \"type\": \"section\",
                      \"text\": {
                        \"type\": \"mrkdwn\",
                        \"text\": \"${{ steps.notification.outputs.emoji }} *${{ steps.notification.outputs.message }}*\"
                      }
                    },
                    {
                      \"type\": \"context\",
                      \"elements\": [
                        {
                          \"type\": \"mrkdwn\",
                          \"text\": \"Branch: \`${{ github.ref_name }}\` | Commit: \`${{ github.sha }}\` | Actor: ${{ github.actor }}\"
                        }
                      ]
                    }
                  ]
                }
              ]
            }" \
            $SLACK_WEBHOOK_URL || echo "Slack notification failed"

      - name: Send Teams notification  
        if: vars.TEAMS_WEBHOOK_URL != ''
        env:
          TEAMS_WEBHOOK_URL: ${{ vars.TEAMS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"@type\": \"MessageCard\",
              \"@context\": \"http://schema.org/extensions\",
              \"summary\": \"${{ steps.notification.outputs.message }}\",
              \"themeColor\": \"${{ steps.notification.outputs.color == 'good' && '00FF00' || 'FF0000' }}\",
              \"sections\": [{
                \"activityTitle\": \"${{ steps.notification.outputs.emoji }} Databricks Deployment\",
                \"activitySubtitle\": \"${{ steps.notification.outputs.message }}\",
                \"facts\": [
                  {\"name\": \"Environment\", \"value\": \"${{ needs.validate.outputs.target }}\"},
                  {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\"},
                  {\"name\": \"Actor\", \"value\": \"${{ github.actor }}\"}
                ]
              }]
            }" \
            $TEAMS_WEBHOOK_URL || echo "Teams notification failed"
