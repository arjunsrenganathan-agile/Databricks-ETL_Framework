name: Deploy Databricks ETL Framework

on:
  push:
    branches:
      - main        # Deploy to dev from main
      - develop     # Deploy to dev from develop
    paths:
      - 'ETL_Framework/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'ETL_Framework/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (skip validation failures)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  WORKING_DIRECTORY: './ETL_Framework'

jobs:
  # Validation job - runs for all triggers
  validate:
    name: 'Validate Bundle'
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.determine-target.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Determine deployment strategy
        id: determine-target
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          
          # Always use dev target, but determine if we should deploy
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_DEPLOY="true"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            SHOULD_DEPLOY="false"  # Only validate on PRs, don't deploy
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            SHOULD_DEPLOY="true"
          else
            SHOULD_DEPLOY="false"  # Feature branches only validate
          fi
          
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "🎯 Target: dev (only target available)"
          echo "🚀 Should Deploy: $SHOULD_DEPLOY" 

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks configure --host "$DATABRICKS_HOST" --token "$DATABRICKS_TOKEN"

      - name: Install Python dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "📦 Setting up virtual env and installing dependencies..."
          uv venv
          if [ -f requirements.txt ]; then
            echo "Installing from requirements.txt"
            uv pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            echo "Installing dev dependencies"
            uv pip install -r requirements-dev.txt
          fi
          echo "✅ Dependencies installed"

      - name: Validate bundle configuration
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "🔍 Validating bundle configuration..."
          echo "Target: dev (only available target)"
          
          # Check databricks.yml exists
          if [ ! -f "databricks.yml" ]; then
            echo "❌ databricks.yml not found!"
            exit 1
          fi
          
          # Show bundle info
          echo "Bundle contents:"
          ls -la
          
          # Validate the bundle for dev target
          databricks bundle validate --target dev  # 👈 HARDCODED TO 'dev'
          echo "✅ Bundle validation successful!"

      - name: Show deployment plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        if: steps.determine-target.outputs.should_deploy == 'true'
        run: |
          echo "📋 Deployment Plan for dev environment:"
          databricks bundle summary --target dev || echo "Summary not available"  # 👈 HARDCODED TO 'dev'

  # Deployment job - only runs when should_deploy is true
  deploy:
    name: 'Deploy to dev'
    runs-on: ubuntu-latest
    needs: [validate]
    if: |
      always() && 
      needs.validate.result == 'success' && 
      needs.validate.outputs.should_deploy == 'true'
    environment: 
      name: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks configure --host "$DATABRICKS_HOST" --token "$DATABRICKS_TOKEN"

      - name: Pre-deployment check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "🚀 Starting deployment to dev environment"
          echo "Force deploy: ${{ github.event.inputs.force_deploy }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          
          # Final validation unless force deploy
          if [[ "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
            echo "🔍 Final validation before deployment..."
            databricks bundle validate --target dev  # 👈 HARDCODED TO 'dev'
          else
            echo "⚠️ Skipping validation due to force deploy flag"
          fi

      - name: Deploy bundle
        id: deploy
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "📦 Deploying bundle to dev environment..."
          
          # Deploy with appropriate flags
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            databricks bundle destroy --target dev
            databricks bundle deploy --target dev --force  # 👈 HARDCODED TO 'dev'
            echo "⚠️ Force deployment completed"
          else
            databricks bundle destroy --target dev
            databricks bundle deploy --target dev  # 👈 HARDCODED TO 'dev'
            echo "✅ Standard deployment completed"
          fi
          
          # Get workspace URL
          WORKSPACE_HOST=$(databricks auth env | grep DATABRICKS_HOST | cut -d'=' -f2)
          echo "workspace_url=${WORKSPACE_HOST}" >> $GITHUB_OUTPUT
          
          echo "🎉 Deployment successful!"

      - name: Post-deployment verification
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "🔍 Post-deployment verification..."
          
          # Show deployed resources
          echo "Deployed resources summary:"
          databricks bundle summary --target dev || echo "Summary not available"  # 👈 HARDCODED TO 'dev'
          
          echo "✅ Post-deployment verification completed"

      - name: Update deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **DEPLOYMENT SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Target:** dev" >> $GITHUB_STEP_SUMMARY  
            echo "🌍 **Environment:** development" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **Workspace:** ${{ steps.deploy.outputs.workspace_url }}" >> $GITHUB_STEP_SUMMARY
            echo "🌿 **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your ETL Framework has been successfully deployed to dev! 🚀" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **DEPLOYMENT FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for error details." >> $GITHUB_STEP_SUMMARY
            echo "You can retry the deployment or use the manual workflow dispatch." >> $GITHUB_STEP_SUMMARY
          fi
